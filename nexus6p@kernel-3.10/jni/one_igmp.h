#ifndef ONE_IGMP_H 
#define ONE_IGMP_H

#define __rcu

typedef struct callback_head {
    struct callback_head *next;
    void (*func)(struct callback_head *head);
} callback_head;
#define rcu_head callback_head

typedef struct ip_sf_socklist {
    unsigned int        sl_max;
    unsigned int        sl_count;
    struct rcu_head     rcu;
    __be32          sl_addr[0];
} ip_sf_socklist;

typedef struct ip_mc_socklist {
    struct ip_mc_socklist __rcu *next_rcu;
    struct ip_mreqn     multi;
    unsigned int        sfmode;     /* MCAST_{INCLUDE,EXCLUDE} */
    struct ip_sf_socklist __rcu *sflist;
    struct rcu_head     rcu;
} ip_mc_socklist;

typedef enum socket_state
{
	SS_FREE = 0,			/* not allocated		*/
	SS_UNCONNECTED,			/* unconnected to any socket	*/
	SS_CONNECTING,			/* in process of connecting	*/
	SS_CONNECTED,			/* connected to socket		*/
	SS_DISCONNECTING		/* in process of disconnecting	*/
} socket_state;

typedef struct sokket {
	socket_state		state; //+0 for 32-bit //+0 for 64-bit
	//kmemcheck_bitfield_begin(type); //kmemcheck may be disabled; its size =0
	short			type; //+4
	//kmemcheck_bitfield_end(type);
	unsigned long		flags; //+8 (+2b of padding)
	struct socket_wq __rcu	*wq; //+12 //+16 (+4b of padding)
	struct file		*file; //+16 //+24
	struct sock		*sk; //+20 //+32
	/*const*/ struct proto_ops	*ops; //+24 //+40
} sokket; //=28bytes //=48bytes

typedef struct proto_ops {
	int		family; //+0 for 32-bit //+0 for 64-bit
	struct module	*owner; //+4 //+8 (+4b of padding)
	int		(*release)   (struct socket *sock); //+8 //+16
	int		(*bind)	     (struct socket *sock, //+12 //+24
				      struct sockaddr *myaddr,
				      int sockaddr_len);
	int		(*connect)   (struct socket *sock, //+16 //+32
				      struct sockaddr *vaddr,
				      int sockaddr_len, int flags);
	int		(*socketpair)(struct socket *sock1, //+20 //+40
				      struct socket *sock2);
	int		(*accept)    (struct socket *sock, //+24 //+48
				      struct socket *newsock, int flags);
	int		(*getname)   (struct socket *sock, //+28 //+56
				      struct sockaddr *addr,
				      int *sockaddr_len, int peer);
	unsigned int	(*poll)	     (struct file *file, struct socket *sock, //+32 //+64
				      struct poll_table_struct *wait);
	int		(*ioctl)     (struct socket *sock, unsigned int cmd, //+36 //+72
				      unsigned long arg);
#ifdef CONFIG_COMPAT //<-- NOT SET FOR F-01F
	int	 	(*compat_ioctl) (struct socket *sock, unsigned int cmd, //+40 //+80
				      unsigned long arg);
#endif
	int		(*listen)    (struct socket *sock, int len); //+44 //+88
	int		(*shutdown)  (struct socket *sock, int flags); //+48 //+96
	int		(*setsockopt)(struct socket *sock, int level, //+52 //+104
				      int optname, char __user *optval, unsigned int optlen);
	int		(*getsockopt)(struct socket *sock, int level, //+56 //+112
				      int optname, char __user *optval, int __user *optlen);
#ifdef CONFIG_COMPAT //<-- NOT SET FOR F-01F
	int		(*compat_setsockopt)(struct socket *sock, int level, //+60 //+120
				      int optname, char __user *optval, unsigned int optlen);
	int		(*compat_getsockopt)(struct socket *sock, int level, //+64 //+128
				      int optname, char __user *optval, int __user *optlen);
#endif
	int		(*sendmsg)   (struct kiocb *iocb, struct socket *sock, //+68 //+136
				      struct msghdr *m, size_t total_len);
	int		(*recvmsg)   (struct kiocb *iocb, struct socket *sock, //+72 //+144
				      struct msghdr *m, size_t total_len,
				      int flags);
	int		(*mmap)	     (struct file *file, struct socket *sock, //+76 //+152
				      struct vm_area_struct * vma);
	ssize_t		(*sendpage)  (struct socket *sock, struct page *page, //+80 //+160
				      int offset, size_t size, int flags);
	ssize_t 	(*splice_read)(struct socket *sock,  loff_t *ppos, //+84 //+168
				       struct pipe_inode_info *pipe, size_t len, unsigned int flags);
	void		(*set_peek_off)(struct sock *sk, int val); //+88 //+176
} proto_ops; //=92bytes //=184bytes

#endif // ONE_IGMP_H